openapi: 3.0.3
info:
  title: FlowForge API
  description: A self-hosted, node-based workflow automation platform inspired by n8n.io
  version: 1.0.0
  contact:
    name: FlowForge
    url: https://github.com/ugmurthy/FlowForge

servers:
  - url: http://localhost:3001
    description: Local development server
  - url: http://localhost:3001/api
    description: API base path

tags:
  - name: Health
    description: Health check endpoints
  - name: Workflows
    description: Workflow management operations
  - name: Executions
    description: Workflow execution operations
  - name: Credentials
    description: Credential management operations

paths:
  /api/health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API service is healthy and running
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                    example: '2025-09-30T12:00:00.000Z'
                  service:
                    type: string
                    example: FlowForge API

  /api/workflows:
    get:
      tags:
        - Workflows
      summary: Get all workflows
      description: Retrieve a list of all workflows
      operationId: getAllWorkflows
      responses:
        '200':
          description: List of workflows retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflows:
                    type: array
                    items:
                      $ref: '#/components/schemas/Workflow'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Workflows
      summary: Create a new workflow
      description: Create a new workflow with nodes and edges
      operationId: createWorkflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
      responses:
        '201':
          description: Workflow created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflow:
                    $ref: '#/components/schemas/Workflow'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workflows/{id}:
    get:
      tags:
        - Workflows
      summary: Get workflow by ID
      description: Retrieve a specific workflow by its ID
      operationId: getWorkflowById
      parameters:
        - name: id
          in: path
          required: true
          description: Workflow ID
          schema:
            type: string
      responses:
        '200':
          description: Workflow retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflow:
                    $ref: '#/components/schemas/Workflow'
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Workflows
      summary: Update workflow
      description: Update an existing workflow by ID
      operationId: updateWorkflow
      parameters:
        - name: id
          in: path
          required: true
          description: Workflow ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowRequest'
      responses:
        '200':
          description: Workflow updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflow:
                    $ref: '#/components/schemas/Workflow'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Workflows
      summary: Delete workflow
      description: Delete a workflow by ID
      operationId: deleteWorkflow
      parameters:
        - name: id
          in: path
          required: true
          description: Workflow ID
          schema:
            type: string
      responses:
        '200':
          description: Workflow deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workflow deleted successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/workflows/{id}/execute:
    post:
      tags:
        - Executions
      summary: Execute workflow
      description: Execute a workflow by ID with optional input data
      operationId: executeWorkflow
      parameters:
        - name: id
          in: path
          required: true
          description: Workflow ID
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                inputData:
                  type: object
                  description: Input data for workflow execution
                  additionalProperties: true
      responses:
        '200':
          description: Workflow executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workflow executed successfully
                  executionId:
                    type: string
                  context:
                    type: object
                    description: Execution context with results and logs
                    additionalProperties: true
        '404':
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Workflow execution failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/executions:
    get:
      tags:
        - Executions
      summary: Get executions
      description: Retrieve workflow execution history, optionally filtered by workflow ID
      operationId: getExecutions
      parameters:
        - name: workflowId
          in: query
          required: false
          description: Filter executions by workflow ID
          schema:
            type: string
      responses:
        '200':
          description: Executions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  executions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Execution'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/credentials:
    get:
      tags:
        - Credentials
      summary: Get all credentials
      description: Retrieve a list of all stored credentials
      operationId: getAllCredentials
      responses:
        '200':
          description: Credentials retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  credentials:
                    type: array
                    items:
                      $ref: '#/components/schemas/Credential'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Credentials
      summary: Create credential
      description: Save a new credential (encrypted)
      operationId: createCredential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCredentialRequest'
      responses:
        '201':
          description: Credential created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  message:
                    type: string
                    example: Credential saved successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/credentials/{id}:
    get:
      tags:
        - Credentials
      summary: Get credential by ID
      description: Retrieve a specific credential by its ID
      operationId: getCredentialById
      parameters:
        - name: id
          in: path
          required: true
          description: Credential ID
          schema:
            type: string
      responses:
        '200':
          description: Credential retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  credential:
                    $ref: '#/components/schemas/Credential'
        '404':
          description: Credential not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Credentials
      summary: Delete credential
      description: Delete a credential by ID
      operationId: deleteCredential
      parameters:
        - name: id
          in: path
          required: true
          description: Credential ID
          schema:
            type: string
      responses:
        '200':
          description: Credential deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Credential deleted successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Workflow:
      type: object
      properties:
        id:
          type: string
          description: Unique workflow identifier
        name:
          type: string
          description: Workflow name
        description:
          type: string
          description: Workflow description
        nodes:
          type: array
          description: Array of workflow nodes
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          description: Array of edges connecting nodes
          items:
            $ref: '#/components/schemas/Edge'
        isActive:
          type: boolean
          description: Whether the workflow is active
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Node:
      type: object
      properties:
        id:
          type: string
          description: Unique node identifier
        type:
          type: string
          description: Node type (e.g., trigger, httpRequest, condition)
        position:
          type: object
          properties:
            x:
              type: number
            y:
              type: number
        data:
          type: object
          description: Node-specific configuration data
          additionalProperties: true

    Edge:
      type: object
      properties:
        id:
          type: string
          description: Unique edge identifier
        source:
          type: string
          description: Source node ID
        target:
          type: string
          description: Target node ID
        sourceHandle:
          type: string
          description: Source handle ID
        targetHandle:
          type: string
          description: Target handle ID

    CreateWorkflowRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Workflow name
        description:
          type: string
          description: Workflow description
        nodes:
          type: array
          description: Array of workflow nodes
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          description: Array of edges connecting nodes
          items:
            $ref: '#/components/schemas/Edge'

    UpdateWorkflowRequest:
      type: object
      properties:
        name:
          type: string
          description: Workflow name
        description:
          type: string
          description: Workflow description
        nodes:
          type: array
          description: Array of workflow nodes
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          description: Array of edges connecting nodes
          items:
            $ref: '#/components/schemas/Edge'
        isActive:
          type: boolean
          description: Whether the workflow is active

    Execution:
      type: object
      properties:
        id:
          type: string
          description: Unique execution identifier
        workflowId:
          type: string
          description: Associated workflow ID
        status:
          type: string
          enum: [running, completed, failed]
          description: Execution status
        inputData:
          type: object
          description: Input data provided for execution
          additionalProperties: true
        logs:
          type: array
          description: Execution logs
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    Credential:
      type: object
      properties:
        id:
          type: string
          description: Unique credential identifier
        name:
          type: string
          description: Credential name
        type:
          type: string
          description: Credential type (e.g., oauth2, apiKey, basic)
        data:
          type: object
          description: Encrypted credential data
          additionalProperties: true
        createdAt:
          type: string
          format: date-time

    CreateCredentialRequest:
      type: object
      required:
        - name
        - type
        - data
      properties:
        name:
          type: string
          description: Credential name
        type:
          type: string
          description: Credential type (e.g., oauth2, apiKey, basic)
        data:
          type: object
          description: Credential data (will be encrypted)
          additionalProperties: true

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
